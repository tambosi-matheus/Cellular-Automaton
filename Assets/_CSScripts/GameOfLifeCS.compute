#pragma kernel Create
#pragma kernel Update
#pragma kernel Show

Texture2D<float> Prev;
RWTexture2D<float> Result;
RWTexture2D<float4> ColorMap;

float hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaledHash01(float state)
{
    return (float) hash((uint) state) / 4294967295.0;
}

[numthreads(8, 8, 1)]
void Create(uint3 id : SV_DispatchThreadID)
{
    if (scaledHash01(id.y * id.x + id.x + hash(id.x + id.y * 100000))  >= 0.5f)
    {
        Result[id.xy] = 1;
    }  
}

float decayRate;
bool randomRegeneration;

[numthreads(8, 8, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{   
    // Get neighbors in 3x3 grid
    int neighborsCount = 0;
    
    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            if ((i == 0 && j == 0) || (id.x == 0 && i == -1) || (id.y == 0 && j == -1) < 0)                         
                continue;
            if (Prev[uint2(id.x + i, id.y + j)] == 1)            
                neighborsCount += 1;
        }
    }

    float alive = Prev[id.xy];
    if (alive == 1)
    {    
        if (neighborsCount < 2 || neighborsCount > 3)        
            alive = 0.99; 
    }
    else
    {
        if (neighborsCount == 3)        
            alive = 1;
        else if (alive > 0.1)
            alive *= 1 - decayRate;
        else if (randomRegeneration && scaledHash01(id.y * id.x + id.x + hash(id.x + id.y * 100000)) < 0.01)
            alive = 1;
    }
    
    Result[id.xy] = alive;
        
}

[numthreads(8, 8, 1)]
void Show(uint3 id : SV_DispatchThreadID)
{
    float alpha = Result[id.xy];    
    if (alpha < 0.1)
        ColorMap[id.xy] = float4(0.05, 0, 0, 1);
    else if (alpha < 0.9)
        ColorMap[id.xy] = float4(alpha, alpha / 22, alpha / 22, 1);
    else
        ColorMap[id.xy] = alpha;
}